# Supply a variable name when opening a file. This will become the file handle.   In this unit, we're going to talk for a few minutes about file handles. Now, you'll notice in the previous units that we've used the variable 'f' to get the results back from the open method. Now, 'f' is a variable. We could have called it anything, we've chosen 'f' because that's nice and short and easy to remember, but when you gets the results of the open function, 'f' stores an object, and this is called a file handle. It allows us to manipulate our files. Attached to this object are various methods that we use for reading and writing the contents of our files. You can see what methods are available to you by typing 'f' and then the full-stop in Cloud9. You'll see here we have close, we have read, readline. We're familiar with these. There's a few others that we're going to learn about a little bit later: seek and tell. We've also used write already as well. So, this is how we access the methods that are attached to this new object that we've created. Now, it's important to understand that when you open a file you're reading or writing at a certain position within that file. When you use the readline method - let's type it here - to read in a line, then what actually happens is that your position within the file is advanced by whatever number of characters are in that line. So, the next time you read a line the data will be read from that new position. Lines are kind of an abstract thing anyway because the file itself doesn't actually have any lines. The file is just one long sequence of bytes, which is how the computer stores characters. When Python sees a line separator such as the \n, then it interprets that as making the break between two lines  So how does Python track where we are in a file? Well, that's tracked using what's known as a cursor. And, just like your position in a word processing document is represented by a cursor that indicates where text will be inserted or deleted, then it's the same with a file. In fact, we can use the cursor here as an example. If we put the cursor in the middle of a line and start typing, then we know that that's where the text is going to appear. Files use a cursor as well to track where they are. Whenever we write or read file contents using the different file handle methods, then that causes the cursor to move. You can move the cursor to a specific position in the file using the method that we just looked at a few seconds ago, the seek method, but we're going to have a look at that a bit more in our next unit. We could continue using scripts to demonstrate file i/o, but to really get a feel for how it works then we need quicker feedback than we can get from just writing and running scripts. So in the next lesson we're going to use the Python console or Python shell as it's also known to manipulate files.

f = open("data.txt", "r")
lines = f.read()

line = f.readline()


